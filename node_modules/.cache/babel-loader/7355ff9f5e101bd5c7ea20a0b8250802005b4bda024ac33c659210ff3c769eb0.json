{"ast":null,"code":"import _slicedToArray from\"D:/Die Trying/React/weather-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from\"react\";import{useState}from\"react\";import{AsyncPaginate}from\"react-select-async-paginate\";import{geoApiOptions,GEO_API_URL}from\"./api\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Search=function Search(_ref){var onSearchChange=_ref.onSearchChange;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),search=_useState2[0],setSearch=_useState2[1];var searchandler=function searchandler(searchData){setSearch(searchData);onSearchChange(searchData);};//   const loadOptions = (inputValue) => {\n//     return fetch(\n//       `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n//       getAPIOptions\n//     )\n//       .then((response) => response.json())\n//       .then((response) => {\n//         return {\n//           options: response.data.map((city) => {\n//             return {\n//               value: `${city.latitude} ${city.longitude}`,\n//               labele: `${city.name}, ${city.countryCode}`,\n//             };\n//           }),\n//         };\n//       });\n//   };\nvar loadOptions=function loadOptions(inputValue){return fetch(\"\".concat(GEO_API_URL,\"/cities?minPopulation=1000000&namePrefix=\").concat(inputValue),geoApiOptions).then(function(response){return response.json();}).then(function(response){return{options:response.data.map(function(city){return{value:\"\".concat(city.latitude,\" \").concat(city.longitude),label:\"\".concat(city.name,\", \").concat(city.countryCode)};})};});};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"\",children:\"Enter a city name : \"}),/*#__PURE__*/_jsx(AsyncPaginate,{style:{borderRadius:\"2px\"},type:\"text\",placeholder:\"Search for a city\",debouncetimeout:600,value:search,onChange:searchandler,loadOptions:loadOptions})]});};export default Search;// return {\n//     options: response.data.map((city)=>{\n//         return {\n//             value: `${city.latitude} ${city.longitude}`,\n//             label: `${city.name}, ${city.countryCode}`,\n//         };\n//     }),\n// };","map":{"version":3,"names":["React","useState","AsyncPaginate","geoApiOptions","GEO_API_URL","Search","onSearchChange","search","setSearch","searchandler","searchData","loadOptions","inputValue","fetch","then","response","json","options","data","map","city","value","latitude","longitude","label","name","countryCode","borderRadius"],"sources":["D:/Die Trying/React/weather-app/src/Components/search/Search.js"],"sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { AsyncPaginate } from \"react-select-async-paginate\";\r\nimport { geoApiOptions, GEO_API_URL } from \"./api\";\r\nconst Search = ({ onSearchChange }) => {\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const searchandler = (searchData) => {\r\n    setSearch(searchData);\r\n    onSearchChange(searchData);\r\n  };\r\n\r\n//   const loadOptions = (inputValue) => {\r\n//     return fetch(\r\n//       `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\r\n//       getAPIOptions\r\n//     )\r\n//       .then((response) => response.json())\r\n//       .then((response) => {\r\n//         return {\r\n//           options: response.data.map((city) => {\r\n//             return {\r\n//               value: `${city.latitude} ${city.longitude}`,\r\n//               labele: `${city.name}, ${city.countryCode}`,\r\n//             };\r\n//           }),\r\n//         };\r\n//       });\r\n//   };\r\n\r\nconst loadOptions = (inputValue) => {\r\n    return fetch(\r\n      `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\r\n      geoApiOptions\r\n    )\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        return {\r\n          options: response.data.map((city) => {\r\n            return {\r\n              value: `${city.latitude} ${city.longitude}`,\r\n              label: `${city.name}, ${city.countryCode}`,\r\n            };\r\n          }),\r\n        };\r\n      });\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <label htmlFor=\"\">Enter a city name : </label>\r\n      <AsyncPaginate\r\n        style={{ borderRadius: \"2px\" }}\r\n        type=\"text\"\r\n        placeholder=\"Search for a city\"\r\n        debouncetimeout={600}\r\n        value={search}\r\n        onChange={searchandler}\r\n        loadOptions={loadOptions}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n\r\n// return {\r\n//     options: response.data.map((city)=>{\r\n//         return {\r\n//             value: `${city.latitude} ${city.longitude}`,\r\n//             label: `${city.name}, ${city.countryCode}`,\r\n//         };\r\n//     }),\r\n// };\r\n"],"mappings":"qHAAA,MAAOA,MAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,KAAQ,OAAO,CAChC,OAASC,aAAa,KAAQ,6BAA6B,CAC3D,OAASC,aAAa,CAAEC,WAAW,KAAQ,OAAO,CAAC,wFACnD,GAAMC,OAAM,CAAG,QAATA,OAAM,MAA2B,IAArBC,eAAc,MAAdA,cAAc,CAC9B,cAA4BL,QAAQ,CAAC,EAAE,CAAC,wCAAjCM,MAAM,eAAEC,SAAS,eAExB,GAAMC,aAAY,CAAG,QAAfA,aAAY,CAAIC,UAAU,CAAK,CACnCF,SAAS,CAACE,UAAU,CAAC,CACrBJ,cAAc,CAACI,UAAU,CAAC,CAC5B,CAAC,CAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMC,YAAW,CAAG,QAAdA,YAAW,CAAIC,UAAU,CAAK,CAChC,MAAOC,MAAK,WACPT,WAAW,qDAA4CQ,UAAU,EACpET,aAAa,CACd,CACEW,IAAI,CAAC,SAACC,QAAQ,QAAKA,SAAQ,CAACC,IAAI,EAAE,GAAC,CACnCF,IAAI,CAAC,SAACC,QAAQ,CAAK,CAClB,MAAO,CACLE,OAAO,CAAEF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAAC,SAACC,IAAI,CAAK,CACnC,MAAO,CACLC,KAAK,WAAKD,IAAI,CAACE,QAAQ,aAAIF,IAAI,CAACG,SAAS,CAAE,CAC3CC,KAAK,WAAKJ,IAAI,CAACK,IAAI,cAAKL,IAAI,CAACM,WAAW,CAC1C,CAAC,CACH,CAAC,CACH,CAAC,CACH,CAAC,CAAC,CACN,CAAC,CACD,mBACE,aAAK,SAAS,CAAC,WAAW,wBACxB,cAAO,OAAO,CAAC,EAAE,UAAC,sBAAoB,EAAQ,cAC9C,KAAC,aAAa,EACZ,KAAK,CAAE,CAAEC,YAAY,CAAE,KAAM,CAAE,CAC/B,IAAI,CAAC,MAAM,CACX,WAAW,CAAC,mBAAmB,CAC/B,eAAe,CAAE,GAAI,CACrB,KAAK,CAAEpB,MAAO,CACd,QAAQ,CAAEE,YAAa,CACvB,WAAW,CAAEE,WAAY,EACzB,GACE,CAEV,CAAC,CAED,cAAeN,OAAM,CAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}