{"ast":null,"code":"var _jsxFileName = \"D:\\\\Die Trying\\\\React\\\\weather-app\\\\src\\\\Components\\\\search\\\\search.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { geoApiOptions, GEO_API_URL } from \"../../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Search = _ref => {\n  _s();\n  let {\n    onSearchChange\n  } = _ref;\n  const [search, setSearch] = useState(null);\n  const loadOptions = async inputValue => {\n    const response = await fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions);\n    const response_1 = await response.json();\n    return {\n      options: response_1.data.map(city => {\n        return {\n          value: `${city.latitude} ${city.longitude}`,\n          label: `${city.name}, ${city.countryCode}`\n        };\n      })\n    };\n  };\n  const handleOnChange = searchData => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n  return /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n    placeholder: \"Search for city\",\n    debounceTimeout: 600,\n    value: search,\n    onChange: handleOnChange,\n    loadOptions: loadOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(Search, \"rZ+0pF47En10nDqJpRK7x4d9dB0=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","AsyncPaginate","geoApiOptions","GEO_API_URL","Search","onSearchChange","search","setSearch","loadOptions","inputValue","response","fetch","response_1","json","options","data","map","city","value","latitude","longitude","label","name","countryCode","handleOnChange","searchData"],"sources":["D:/Die Trying/React/weather-app/src/Components/search/search.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { geoApiOptions, GEO_API_URL } from \"../../api\";\n\nconst Search = ({ onSearchChange }) => {\n  const [search, setSearch] = useState(null);\n\n  const loadOptions = async (inputValue) => {\n    const response = await fetch(\n      `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n      geoApiOptions\n    );\n    const response_1 = await response.json();\n    return {\n      options: response_1.data.map((city) => {\n        return {\n          value: `${city.latitude} ${city.longitude}`,\n          label: `${city.name}, ${city.countryCode}`,\n        };\n      }),\n    };\n  };\n\n  const handleOnChange = (searchData) => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n\n  return (\n    <AsyncPaginate\n      placeholder=\"Search for city\"\n      debounceTimeout={600}\n      value={search}\n      onChange={handleOnChange}\n      loadOptions={loadOptions}\n    />\n  );\n};\n\nexport default Search;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,aAAa,EAAEC,WAAW,QAAQ,WAAW;AAAC;AAEvD,MAAMC,MAAM,GAAG,QAAwB;EAAA;EAAA,IAAvB;IAAEC;EAAe,CAAC;EAChC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMQ,WAAW,GAAG,MAAOC,UAAU,IAAK;IACxC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAER,WAAY,4CAA2CM,UAAW,EAAC,EACtEP,aAAa,CACd;IACD,MAAMU,UAAU,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;IACxC,OAAO;MACLC,OAAO,EAAEF,UAAU,CAACG,IAAI,CAACC,GAAG,CAAEC,IAAI,IAAK;QACrC,OAAO;UACLC,KAAK,EAAG,GAAED,IAAI,CAACE,QAAS,IAAGF,IAAI,CAACG,SAAU,EAAC;UAC3CC,KAAK,EAAG,GAAEJ,IAAI,CAACK,IAAK,KAAIL,IAAI,CAACM,WAAY;QAC3C,CAAC;MACH,CAAC;IACH,CAAC;EACH,CAAC;EAED,MAAMC,cAAc,GAAIC,UAAU,IAAK;IACrClB,SAAS,CAACkB,UAAU,CAAC;IACrBpB,cAAc,CAACoB,UAAU,CAAC;EAC5B,CAAC;EAED,oBACE,QAAC,aAAa;IACZ,WAAW,EAAC,iBAAiB;IAC7B,eAAe,EAAE,GAAI;IACrB,KAAK,EAAEnB,MAAO;IACd,QAAQ,EAAEkB,cAAe;IACzB,WAAW,EAAEhB;EAAY;IAAA;IAAA;IAAA;EAAA,QACzB;AAEN,CAAC;AAAC,GAjCIJ,MAAM;AAAA,KAANA,MAAM;AAmCZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}