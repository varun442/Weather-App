{"ast":null,"code":"var _jsxFileName = \"D:\\\\Die Trying\\\\React\\\\weather-app\\\\src\\\\Components\\\\search\\\\Search.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { geoApiOptions, GEO_API_URL } from \"./api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Search = _ref => {\n  _s();\n  let {\n    onSearchChange\n  } = _ref;\n  const [search, setSearch] = useState(\"\");\n  const searchandler = searchData => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n\n  //   const loadOptions = (inputValue) => {\n  //     return fetch(\n  //       `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n  //       getAPIOptions\n  //     )\n  //       .then((response) => response.json())\n  //       .then((response) => {\n  //         return {\n  //           options: response.data.map((city) => {\n  //             return {\n  //               value: `${city.latitude} ${city.longitude}`,\n  //               labele: `${city.name}, ${city.countryCode}`,\n  //             };\n  //           }),\n  //         };\n  //       });\n  //   };\n\n  const loadOptions = inputValue => {\n    return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions).then(response => response.json()).then(response => {\n      return {\n        options: response.data.map(city => {\n          return {\n            value: `${city.latitude} ${city.longitude}`,\n            label: `${city.name}, ${city.countryCode}`\n          };\n        })\n      };\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"\",\n      children: \"Enter a city name : \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n      style: {\n        borderRadius: \"2px\"\n      },\n      type: \"text\",\n      placeholder: \"Search for a city\",\n      debouncetimeout: 1000,\n      value: search,\n      onChange: searchandler,\n      loadOptions: loadOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(Search, \"42GASUL8pX2/N6Oh5HTh0GvQEF0=\");\n_c = Search;\nexport default Search;\n\n// return {\n//     options: response.data.map((city)=>{\n//         return {\n//             value: `${city.latitude} ${city.longitude}`,\n//             label: `${city.name}, ${city.countryCode}`,\n//         };\n//     }),\n// };\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","AsyncPaginate","geoApiOptions","GEO_API_URL","Search","onSearchChange","search","setSearch","searchandler","searchData","loadOptions","inputValue","fetch","then","response","json","options","data","map","city","value","latitude","longitude","label","name","countryCode","borderRadius"],"sources":["D:/Die Trying/React/weather-app/src/Components/search/Search.js"],"sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { AsyncPaginate } from \"react-select-async-paginate\";\r\nimport { geoApiOptions, GEO_API_URL } from \"./api\";\r\nconst Search = ({ onSearchChange }) => {\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const searchandler = (searchData) => {\r\n    setSearch(searchData);\r\n    onSearchChange(searchData);\r\n  };\r\n\r\n//   const loadOptions = (inputValue) => {\r\n//     return fetch(\r\n//       `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\r\n//       getAPIOptions\r\n//     )\r\n//       .then((response) => response.json())\r\n//       .then((response) => {\r\n//         return {\r\n//           options: response.data.map((city) => {\r\n//             return {\r\n//               value: `${city.latitude} ${city.longitude}`,\r\n//               labele: `${city.name}, ${city.countryCode}`,\r\n//             };\r\n//           }),\r\n//         };\r\n//       });\r\n//   };\r\n\r\nconst loadOptions = (inputValue) => {\r\n    return fetch(\r\n      `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\r\n      geoApiOptions\r\n    )\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        return {\r\n          options: response.data.map((city) => {\r\n            return {\r\n              value: `${city.latitude} ${city.longitude}`,\r\n              label: `${city.name}, ${city.countryCode}`,\r\n            };\r\n          }),\r\n        };\r\n      });\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <label htmlFor=\"\">Enter a city name : </label>\r\n      <AsyncPaginate\r\n        style={{ borderRadius: \"2px\" }}\r\n        type=\"text\"\r\n        placeholder=\"Search for a city\"\r\n        debouncetimeout={1000}\r\n        value={search}\r\n        onChange={searchandler}\r\n        loadOptions={loadOptions}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n\r\n// return {\r\n//     options: response.data.map((city)=>{\r\n//         return {\r\n//             value: `${city.latitude} ${city.longitude}`,\r\n//             label: `${city.name}, ${city.countryCode}`,\r\n//         };\r\n//     }),\r\n// };\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,aAAa,EAAEC,WAAW,QAAQ,OAAO;AAAC;AACnD,MAAMC,MAAM,GAAG,QAAwB;EAAA;EAAA,IAAvB;IAAEC;EAAe,CAAC;EAChC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMQ,YAAY,GAAIC,UAAU,IAAK;IACnCF,SAAS,CAACE,UAAU,CAAC;IACrBJ,cAAc,CAACI,UAAU,CAAC;EAC5B,CAAC;;EAEH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,WAAW,GAAIC,UAAU,IAAK;IAChC,OAAOC,KAAK,CACT,GAAET,WAAY,4CAA2CQ,UAAW,EAAC,EACtET,aAAa,CACd,CACEW,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEC,QAAQ,IAAK;MAClB,OAAO;QACLE,OAAO,EAAEF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAAEC,IAAI,IAAK;UACnC,OAAO;YACLC,KAAK,EAAG,GAAED,IAAI,CAACE,QAAS,IAAGF,IAAI,CAACG,SAAU,EAAC;YAC3CC,KAAK,EAAG,GAAEJ,IAAI,CAACK,IAAK,KAAIL,IAAI,CAACM,WAAY;UAC3C,CAAC;QACH,CAAC;MACH,CAAC;IACH,CAAC,CAAC;EACN,CAAC;EACD,oBACE;IAAK,SAAS,EAAC,WAAW;IAAA,wBACxB;MAAO,OAAO,EAAC,EAAE;MAAA,UAAC;IAAoB;MAAA;MAAA;MAAA;IAAA,QAAQ,eAC9C,QAAC,aAAa;MACZ,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAM,CAAE;MAC/B,IAAI,EAAC,MAAM;MACX,WAAW,EAAC,mBAAmB;MAC/B,eAAe,EAAE,IAAK;MACtB,KAAK,EAAEpB,MAAO;MACd,QAAQ,EAAEE,YAAa;MACvB,WAAW,EAAEE;IAAY;MAAA;MAAA;MAAA;IAAA,QACzB;EAAA;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,GAzDIN,MAAM;AAAA,KAANA,MAAM;AA2DZ,eAAeA,MAAM;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}