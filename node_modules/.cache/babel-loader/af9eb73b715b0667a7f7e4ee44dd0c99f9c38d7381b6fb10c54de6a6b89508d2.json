{"ast":null,"code":"import _slicedToArray from\"D:/Die Trying/React/weather-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from\"react\";import{AsyncPaginate}from\"react-select-async-paginate\";import{geoApiOptions,GEO_API_URL}from\"../../api\";import{jsx as _jsx}from\"react/jsx-runtime\";var Search=function Search(_ref){var onSearchChange=_ref.onSearchChange;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),search=_useState2[0],setSearch=_useState2[1];var loadOptions=function loadOptions(inputValue){return fetch(\"\".concat(GEO_API_URL,\"/cities?minPopulation=1000000&namePrefix=\").concat(inputValue),geoApiOptions).then(function(response){return response.json();}).then(function(response){return{options:response.data.map(function(city){return{value:\"\".concat(city.latitude,\" \").concat(city.longitude),label:\"\".concat(city.name,\", \").concat(city.countryCode)};})};});};var handleOnChange=function handleOnChange(searchData){setSearch(searchData);onSearchChange(searchData);};return/*#__PURE__*/_jsx(AsyncPaginate,{placeholder:\"Search for city\",debounceTimeout:600,value:search,onChange:handleOnChange,loadOptions:loadOptions});};export default Search;","map":{"version":3,"names":["React","useState","AsyncPaginate","geoApiOptions","GEO_API_URL","Search","onSearchChange","search","setSearch","loadOptions","inputValue","fetch","then","response","json","options","data","map","city","value","latitude","longitude","label","name","countryCode","handleOnChange","searchData"],"sources":["D:/Die Trying/React/weather-app/src/Components/search/search.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { geoApiOptions, GEO_API_URL } from \"../../api\";\n\nconst Search = ({ onSearchChange }) => {\n  const [search, setSearch] = useState(null);\n\n  const loadOptions = (inputValue) => {\n    return fetch(\n      `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n      geoApiOptions\n    )\n      .then((response) => response.json())\n      .then((response) => {\n        return {\n          options: response.data.map((city) => {\n            return {\n              value: `${city.latitude} ${city.longitude}`,\n              label: `${city.name}, ${city.countryCode}`,\n            };\n          }),\n        };\n      });\n  };\n\n  const handleOnChange = (searchData) => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n\n  return (\n    <AsyncPaginate\n      placeholder=\"Search for city\"\n      debounceTimeout={600}\n      value={search}\n      onChange={handleOnChange}\n      loadOptions={loadOptions}\n    />\n  );\n};\n\nexport default Search;\n"],"mappings":"qHAAA,MAAOA,MAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,aAAa,KAAQ,6BAA6B,CAC3D,OAASC,aAAa,CAAEC,WAAW,KAAQ,WAAW,CAAC,2CAEvD,GAAMC,OAAM,CAAG,QAATA,OAAM,MAA2B,IAArBC,eAAc,MAAdA,cAAc,CAC9B,cAA4BL,QAAQ,CAAC,IAAI,CAAC,wCAAnCM,MAAM,eAAEC,SAAS,eAExB,GAAMC,YAAW,CAAG,QAAdA,YAAW,CAAIC,UAAU,CAAK,CAClC,MAAOC,MAAK,WACPP,WAAW,qDAA4CM,UAAU,EACpEP,aAAa,CACd,CACES,IAAI,CAAC,SAACC,QAAQ,QAAKA,SAAQ,CAACC,IAAI,EAAE,GAAC,CACnCF,IAAI,CAAC,SAACC,QAAQ,CAAK,CAClB,MAAO,CACLE,OAAO,CAAEF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAAC,SAACC,IAAI,CAAK,CACnC,MAAO,CACLC,KAAK,WAAKD,IAAI,CAACE,QAAQ,aAAIF,IAAI,CAACG,SAAS,CAAE,CAC3CC,KAAK,WAAKJ,IAAI,CAACK,IAAI,cAAKL,IAAI,CAACM,WAAW,CAC1C,CAAC,CACH,CAAC,CACH,CAAC,CACH,CAAC,CAAC,CACN,CAAC,CAED,GAAMC,eAAc,CAAG,QAAjBA,eAAc,CAAIC,UAAU,CAAK,CACrClB,SAAS,CAACkB,UAAU,CAAC,CACrBpB,cAAc,CAACoB,UAAU,CAAC,CAC5B,CAAC,CAED,mBACE,KAAC,aAAa,EACZ,WAAW,CAAC,iBAAiB,CAC7B,eAAe,CAAE,GAAI,CACrB,KAAK,CAAEnB,MAAO,CACd,QAAQ,CAAEkB,cAAe,CACzB,WAAW,CAAEhB,WAAY,EACzB,CAEN,CAAC,CAED,cAAeJ,OAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}