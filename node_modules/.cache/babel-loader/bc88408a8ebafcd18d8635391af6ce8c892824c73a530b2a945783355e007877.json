{"ast":null,"code":"var _jsxFileName = \"D:\\\\Die Trying\\\\React\\\\weather-app\\\\src\\\\Components\\\\Search\\\\Search.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { getAPIOptions, GEO_API_URL } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Search = _ref => {\n  _s();\n  let {\n    onSearchChange\n  } = _ref;\n  const [search, setSearch] = useState('');\n  const searchandler = searchData => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n\n  //   const loadOptions = (inputValue) => {\n  //     fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, getAPIOptions)\n  // \t.then(response => response.json())\n  // \t.then(response => {\n  //         return {\n  //             options: response.data.map((city)=>{\n  //                 return {\n  //                     value: `${city.latitude} ${city.longitude}`,\n  //                     label: `${city.name}, ${city.countryCode}`,\n  //                 };\n  //             }),\n  //         };\n  //     })\n  // \t.catch(err => console.error(err));\n  //   }\n  const loadOptions = inputValue => {\n    fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, getAPIOptions).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json();\n    }).then(response => {\n      if (!response.data) {\n        throw new Error(\"No data property in response\");\n      }\n      return {\n        options: response.data.map(city => {\n          return {\n            value: `${city.latitude} ${city.longitude}`,\n            label: `${city.name}, ${city.countryCode}`\n          };\n        })\n      };\n    }).catch(err => console.error(err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"\",\n      children: \"Enter a city name : \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n      style: {\n        borderRadius: \"2px\"\n      },\n      type: \"text\",\n      placeholder: \"Search for a city\",\n      debouncetimeout: 600,\n      value: search,\n      onChange: searchandler,\n      loadOptions: loadOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(Search, \"xMSft3/sbCidYXUzqinUsZIh+qY=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","AsyncPaginate","getAPIOptions","GEO_API_URL","Search","onSearchChange","search","setSearch","searchandler","searchData","loadOptions","inputValue","fetch","then","response","ok","Error","statusText","json","data","options","map","city","value","latitude","longitude","label","name","countryCode","catch","err","console","error","borderRadius"],"sources":["D:/Die Trying/React/weather-app/src/Components/Search/Search.js"],"sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { AsyncPaginate } from \"react-select-async-paginate\";\r\nimport { getAPIOptions, GEO_API_URL} from './api';\r\nconst Search = ({ onSearchChange }) => {\r\n  const [search, setSearch] = useState('');\r\n\r\n  const searchandler = (searchData) => {\r\n    setSearch(searchData);\r\n    onSearchChange(searchData)\r\n  };\r\n\r\n//   const loadOptions = (inputValue) => {\r\n//     fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, getAPIOptions)\r\n// \t.then(response => response.json())\r\n// \t.then(response => {\r\n//         return {\r\n//             options: response.data.map((city)=>{\r\n//                 return {\r\n//                     value: `${city.latitude} ${city.longitude}`,\r\n//                     label: `${city.name}, ${city.countryCode}`,\r\n//                 };\r\n//             }),\r\n//         };\r\n//     })\r\n// \t.catch(err => console.error(err));\r\n//   }\r\nconst loadOptions = (inputValue) => {\r\n    fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, getAPIOptions)\r\n    .then(response => {\r\n        if (!response.ok) {\r\n            throw new Error(response.statusText);\r\n        }\r\n        return response.json();\r\n    })\r\n    .then(response => {\r\n        if (!response.data) {\r\n            throw new Error(\"No data property in response\");\r\n        }\r\n        return {\r\n            options: response.data.map((city)=>{\r\n                return {\r\n                    value: `${city.latitude} ${city.longitude}`,\r\n                    label: `${city.name}, ${city.countryCode}`,\r\n                };\r\n            }),\r\n        };\r\n    })\r\n    .catch(err => console.error(err));\r\n}\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <label htmlFor=\"\">Enter a city name : </label>\r\n      <AsyncPaginate\r\n        style={{ borderRadius: \"2px\" }}\r\n        type=\"text\"\r\n        placeholder=\"Search for a city\"\r\n        debouncetimeout={600}\r\n        value={search}\r\n        onChange={searchandler}\r\n        loadOptions = {loadOptions}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,aAAa,EAAEC,WAAW,QAAO,OAAO;AAAC;AAClD,MAAMC,MAAM,GAAG,QAAwB;EAAA;EAAA,IAAvB;IAAEC;EAAe,CAAC;EAChC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMQ,YAAY,GAAIC,UAAU,IAAK;IACnCF,SAAS,CAACE,UAAU,CAAC;IACrBJ,cAAc,CAACI,UAAU,CAAC;EAC5B,CAAC;;EAEH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,WAAW,GAAIC,UAAU,IAAK;IAChCC,KAAK,CAAE,GAAET,WAAY,4CAA2CQ,UAAW,EAAC,EAAET,aAAa,CAAC,CAC3FW,IAAI,CAACC,QAAQ,IAAI;MACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAACF,QAAQ,CAACG,UAAU,CAAC;MACxC;MACA,OAAOH,QAAQ,CAACI,IAAI,EAAE;IAC1B,CAAC,CAAC,CACDL,IAAI,CAACC,QAAQ,IAAI;MACd,IAAI,CAACA,QAAQ,CAACK,IAAI,EAAE;QAChB,MAAM,IAAIH,KAAK,CAAC,8BAA8B,CAAC;MACnD;MACA,OAAO;QACHI,OAAO,EAAEN,QAAQ,CAACK,IAAI,CAACE,GAAG,CAAEC,IAAI,IAAG;UAC/B,OAAO;YACHC,KAAK,EAAG,GAAED,IAAI,CAACE,QAAS,IAAGF,IAAI,CAACG,SAAU,EAAC;YAC3CC,KAAK,EAAG,GAAEJ,IAAI,CAACK,IAAK,KAAIL,IAAI,CAACM,WAAY;UAC7C,CAAC;QACL,CAAC;MACL,CAAC;IACL,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC;EACrC,CAAC;EAEC,oBACE;IAAK,SAAS,EAAC,WAAW;IAAA,wBACxB;MAAO,OAAO,EAAC,EAAE;MAAA,UAAC;IAAoB;MAAA;MAAA;MAAA;IAAA,QAAQ,eAC9C,QAAC,aAAa;MACZ,KAAK,EAAE;QAAEG,YAAY,EAAE;MAAM,CAAE;MAC/B,IAAI,EAAC,MAAM;MACX,WAAW,EAAC,mBAAmB;MAC/B,eAAe,EAAE,GAAI;MACrB,KAAK,EAAE3B,MAAO;MACd,QAAQ,EAAEE,YAAa;MACvB,WAAW,EAAIE;IAAY;MAAA;MAAA;MAAA;IAAA,QAC3B;EAAA;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,GA7DIN,MAAM;AAAA,KAANA,MAAM;AA+DZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}